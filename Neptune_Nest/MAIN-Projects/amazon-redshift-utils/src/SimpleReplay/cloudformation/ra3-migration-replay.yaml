AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon Redshift RA3 Simple Replay'

Parameters:
  SourceAccountNumber:
    Description: S3 bucket name which got created as part of extract CloudFormation template
    Type: String
    ConstraintDescription: Must be between 12 digit AWS account number including leading zeros if applicable
    MinLength: 12
    MaxLength: 12
    AllowedPattern: "[0-9]*"
    Default: "123456789012"
  SourceAccountSimpleReplayExtractBucket:
    Description: S3 bucket name which got created as part of extract CloudFormation template
    Type: String
    Default: simple-replay-s3-bucket-in_your-source-account
  SourceRedshiftClusterEndpoint:
    Description: Source Redshift cluster endpoint including port number and database name
    Type: String
    Default: redshift-cluster.xxxxxx.region.redshift.amazonaws.com:5439/dev
  SourceRedshiftClusterKMSKeyARN:
    Description: KMS key ARN for the source redshift cluster (input N/A if the source cluster is not encrypted)
    Type: String
    Default: arn:aws:kms:region:account:key/xxxxxx-xxxxxx-xxxxxxxxxx
  SourceRedshiftClusterMasterUsername:
    Description: The user name that is associated with the master user account for the source redshift cluster (available in your source account's redshift console)
    Type: String
    Default: awsuser
  SourceRedshiftClusterPrimaryDatabase:
    Description: Primary Database Name in the source Redshift cluster for which you would like to replay workload
    Type: String
    Default: dev
  TargetRedshiftClusterNodeType:
    Description: The type of RA3 node to be provisioned
    Type: String
    Default: ra3.4xlarge
    AllowedValues:
      - ra3.xlplus
      - ra3.4xlarge
      - ra3.16xlarge
      - dc2.large
      - dc2.8xlarge
      - ds2.xlarge
      - ds2.8xlarge
  TargetRedshiftClusterNumberOfNodes:
    Description: The number of compute nodes in the cluster. must be greater than 1 and less than permissible slice count. e.g. each ra3.4xl can accommodate from 2 to 12 slices. Therefore a 2 node ra3.4xl can be created from a dc2 cluster with 2 to 12 nodes as each dc2.l comes with 2 slices each
    Type: Number
    Default: 2
    MinValue: 2
  EndUserIamRoleName:
    Description: Existing IAM Role Names for the end user, who may be running the extract-replay evaluation. If provided, the template will grant execution on extract-replay step function to that user role.
    Type: "String"
    Default: "N/A"
  GrantS3ReadOnlyAccessToRedshift:
    Description: Do you want to grant AmazonS3ReadOnlyAccess to the redshift clusters to facilitate replaying copy commands? [Applicable for same account copy statements only if running extract and replay in the same AWS account]
    Type: String
    Default: "Yes"
    AllowedValues:
      - "Yes"
      - "No"
  VPC:
    Description: "vpc_id where source redshift clusters and EC2 instances will be created"
    Type: AWS::EC2::VPC::Id
  SubnetId:
    Description: Subnet ID where source redshift clusters and EC2 instances will be created
    Type: AWS::EC2::Subnet::Id
  KeyPairName:
    Description: Existing key pair name to be used to login to the EC2 instance
    Type: AWS::EC2::KeyPair::KeyName
  OnPremisesCIDR:
    Description: IP range (CIDR notation) for your existing infrastructure to access the target and replica redshift clusters
    Type: String
    Default: 10.0.0.0/8
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  EC2InstanceType:
    Description: Enter EC2 instance type to host Redshift Simple Replay utility codebase. We recommend m5.8xlarge instance type for workloads with 5 TB or more data in the source cluster
    Type: String
    Default: m5.4xlarge
    AllowedValues:
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
  EC2InstanceVolumeGiB:
    Description: Enter size of EC2 instance volume in GiBs. We recommend keeping it 30 GiB or more
    Type: Number
    Default: 30
    MinValue: 1
  EC2InstanceAMI:
    Description: AMI for the Amazon Linux 2 based EC2 instance
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Configurations from Extract CloudFormation
        Parameters:
          - SourceAccountNumber
          - SourceAccountSimpleReplayExtractBucket
          - SourceRedshiftClusterEndpoint
          - SourceRedshiftClusterKMSKeyARN
          - SourceRedshiftClusterMasterUsername
          - SourceRedshiftClusterPrimaryDatabase
      - Label:
          default: Amazon Redshift configuration
        Parameters:
          - TargetRedshiftClusterNodeType
          - TargetRedshiftClusterNumberOfNodes
          - GrantS3ReadOnlyAccessToRedshift
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - VPC
          - SubnetId
          - KeyPairName
          - OnPremisesCIDR
          - EC2InstanceType
          - EC2InstanceVolumeGiB
          - EC2InstanceAMI

Conditions:
  GrantS3ReadOnlyAccessToRedshift:
    !Equals
    - !Ref GrantS3ReadOnlyAccessToRedshift
    - "Yes"
  EndUserStepFunctionPermission:
    !Not [!Equals [!Ref EndUserIamRoleName, "N/A"]]
  EncryptedSourceCluster:
    !Not [!Equals [!Ref SourceRedshiftClusterKMSKeyARN, "N/A"]]

Resources:
  TargetAccountWorkloadReplayBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value:
            !Join [
              '-',
              [
                !Ref 'AWS::StackName',
                'TargetAccountWorkloadReplayBucket',
              ],
            ]

  WorkloadReplayS3BucketAccessPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: WorkloadReplayS3BucketAccess
            Effect: Allow
            Action:
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListMultipartUploadParts
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
            Resource:
              - !Sub "arn:aws:s3:::${TargetAccountWorkloadReplayBucket}"
              - !Sub "arn:aws:s3:::${TargetAccountWorkloadReplayBucket}/*"
              - !Sub "arn:aws:s3:::${SourceAccountSimpleReplayExtractBucket}"
              - !Sub "arn:aws:s3:::${SourceAccountSimpleReplayExtractBucket}/*"

  SimpleReplayRedshiftIAMRole:
    Type: AWS::IAM::Role
    DependsOn: TargetAccountWorkloadReplayBucket
    Properties:
      Description : IAM Role for RA3 Redshift cluster to access resources
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - redshift.amazonaws.com
        Version: '2012-10-17'
      Path: "/"
      ManagedPolicyArns:
            - !Ref WorkloadReplayS3BucketAccessPolicy
            - !If [GrantS3ReadOnlyAccessToRedshift, "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess", !Ref "AWS::NoValue"]

  SimpleReplayIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: "/"
      ManagedPolicyArns:
            - !Ref WorkloadReplayS3BucketAccessPolicy
            - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      Policies:
        - PolicyName: SimpleReplayIAMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - logs:*
                  - ec2:Describe*
                  - redshift:Describe*
                  - redshift-data:ExecuteStatement
                  - redshift-data:ListStatements
                  - redshift-data:GetStatementResult
                  - redshift-data:DescribeStatement
                  - redshift:ModifyClusterParameterGroup
                Resource:
                  - '*'
              -
                Effect: 'Allow'
                Action:
                  - ssm:GetCommandInvocation
                  - ssm:SendCommand
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"
                  - !Sub "arn:aws:ssm:${AWS::Region}::document/AWS-RunShellScript"
                  - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
                  - !Sub "arn:aws:s3:::${TargetAccountWorkloadReplayBucket}/*"
              - Effect: Allow
                Action:
                  - redshift:GetClusterCredentials
                  - redshift:PauseCluster
                  - redshift:ResumeCluster
                  - redshift:ResizeCluster
                  - redshift:RestoreFromClusterSnapshot
                Resource:
                  - !Sub
                    - arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${SourceRedshiftClusterIdentifier}-target
                    - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref SourceRedshiftClusterEndpoint]]}
                  - !Sub
                    - "arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbname:${SourceRedshiftClusterIdentifier}-target/${RedshiftDatabaseName}"
                    - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref SourceRedshiftClusterEndpoint]],RedshiftDatabaseName: !Select [1, !Split ["/", !Ref SourceRedshiftClusterEndpoint]]}
                  - !Sub
                    - "arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbuser:${SourceRedshiftClusterIdentifier}-target/*"
                    - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref SourceRedshiftClusterEndpoint]]}
                  - !Sub
                    - arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${SourceRedshiftClusterIdentifier}-replica
                    - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref SourceRedshiftClusterEndpoint]]}
                  - !Sub
                    - "arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbname:${SourceRedshiftClusterIdentifier}-replica/${RedshiftDatabaseName}"
                    - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref SourceRedshiftClusterEndpoint]],RedshiftDatabaseName: !Select [1, !Split ["/", !Ref SourceRedshiftClusterEndpoint]]}
                  - !Sub
                    - "arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbuser:${SourceRedshiftClusterIdentifier}-replica/*"
                    - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref SourceRedshiftClusterEndpoint]]}

              - Effect: Allow
                Action:
                  - redshift:RestoreFromClusterSnapshot
                Resource:
                  - !Sub
                    - arn:aws:redshift:${AWS::Region}:${SourceAccountNumber}:snapshot:*/ra3-migration-evaluation-snapshot-${SourceRedshiftClusterIdentifier}
                    - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref SourceRedshiftClusterEndpoint]]}
              - Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/redshift.amazonaws.com/AWSServiceRoleForRedshift"

  LambdaReplay:
    Type: AWS::Lambda::Function
    DependsOn:
     - EC2InstanceTarget
    Properties:
      Description: LambdaReplay
      Handler: LambdaReplay.handler
      Runtime: python3.7
      Role: !GetAtt 'SimpleReplayIAMRole.Arn'
      Timeout: 60
      Code:
        S3Bucket: !Ref TargetAccountWorkloadReplayBucket
        S3Key: 'config/LambdaReplay.zip'

  IamRoleStepFunctionReplay:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - states.amazonaws.com
              Action:
                - sts:AssumeRole
      Path: /
      Policies:
          -
            PolicyName: StepFunctionETLPolicy
            PolicyDocument :
              Version: 2012-10-17
              Statement:
                -
                  Effect: "Allow"
                  Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - lambda:InvokeFunction
                  Resource: "*"

  StepFunctionReplay:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        Fn::Sub:
          - |-
            {
              "Comment": "Step function to run ETL",
              "StartAt": "setup_target_and_replica_clusters",
              "States": {
                "setup_target_and_replica_clusters": {
                  "Type": "Parallel",
                  "Next": "setup_complete",
                  "Branches": [
                    {
                      "StartAt": "target_cluster_status_wait",
                      "States": {
                        "target_cluster_status_wait": {
                          "Comment": "Wait 1 minute before status check",
                          "Type": "Wait",
                          "Seconds": 60,
                          "Next": "check_target_cluster_status"
                        },
                        "check_target_cluster_status": {
                          "Comment": "Invoke lambda function",
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "TimeoutSeconds": 60,
                          "HeartbeatSeconds": 60,
                          "ResultPath": "$.step_output",
                          "ResultSelector": {
                            "output.$": "$.Payload"
                          },
                          "Parameters": {
                            "FunctionName": "${LambdaReplay}:$LATEST",
                            "Payload": {
                              "Input": {
                                "action": "cluster_status",
                                "source_clusterid": "${SourceRedshiftClusterIdentifier}",
                                "cluster_type": "target"
                              }
                            }
                          },
                          "Next": "target_cluster_status_action"
                        },
                        "target_cluster_status_action": {
                          "Comment": "check if previous step is complete",
                          "Type": "Choice",
                          "Choices": [
                            {
                            "And": [
                              {
                                "Variable": "$.create_cluster",
                                "IsPresent": true
                              },
                              {
                                "Variable": "$.create_cluster.output.status",
                                "StringEquals": "NeedClassicResize"
                              },
                              {
                                "Variable": "$.step_output.output.status",
                                "StringEquals": "availableAvailablecompleted"
                              }
                            ],
                            "Next": "classic_resize_target_cluster"
                            },
                            {
                            "And": [
                              {
                                "Variable": "$.create_cluster",
                                "IsPresent": true
                              },
                              {
                                "Variable": "$.create_cluster.output.status",
                                "StringEquals": "NeedClassicResize"
                              },
                              {
                                "Variable": "$.step_output.output.status",
                                "StringEquals": "nonExistent"
                              }
                            ],
                            "Next": "target_cluster_status_wait"
                            },
                            {
                              "Variable": "$.step_output.output.status",
                              "StringEquals": "availableAvailablecompleted",
                              "Next": "setup_redshift_objects_target"
                            },
                            {
                              "Variable": "$.step_output.output.status",
                              "StringEquals": "availableAvailable",
                              "Next": "setup_redshift_objects_target"
                            },
                            {
                              "Variable": "$.step_output.output.status",
                              "StringEquals": "nonExistent",
                              "Next": "update_target_parameter_group"
                            },
                            {
                              "Variable": "$.step_output.output.status",
                              "StringEquals": "pausedPausedcompleted",
                              "Next": "resume_target_cluster"
                            }
                          ],
                          "Default": "target_cluster_status_wait"
                          },
                          "update_target_parameter_group": {
                            "Comment": "sync target redshift parameter group with source cluster",
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "TimeoutSeconds": 60,
                            "HeartbeatSeconds": 60,
                            "ResultPath": "$.step_output",
                            "ResultSelector": {
                              "output.$": "$.Payload"
                            },
                            "Parameters": {
                              "FunctionName": "${LambdaReplay}:$LATEST",
                              "Payload": {
                                "Input": {
                                  "action": "update_parameter_group",
                                  "parameter_group_name": "${TargetRedshiftClusterParameterGroup}",
                                  "extract_bucket": "${SourceAccountSimpleReplayExtractBucket}"
                                }
                              }
                            },
                            "Next": "create_target_cluster"
                        },
                        "create_target_cluster": {
                          "Comment": "Invoke lambda function",
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "TimeoutSeconds": 60,
                          "HeartbeatSeconds": 60,
                          "ResultPath": "$.create_cluster",
                          "ResultSelector": {
                            "output.$": "$.Payload"
                          },
                          "Parameters": {
                            "FunctionName": "${LambdaReplay}:$LATEST",
                            "Payload": {
                              "Input": {
                                "action": "create_cluster",
                                "source_clusterid": "${SourceRedshiftClusterIdentifier}",
                                "cluster_type": "target",
                                "extract_bucket": "${SourceAccountSimpleReplayExtractBucket}",
                                "iam_role": "${SimpleReplayRedshiftIAMRole}",
                                "parameter_group_name": "${TargetRedshiftClusterParameterGroup}",
                                "subnet_group": "${RedshiftClusterSubnetGroup}",
                                "security_group_id": "${SecurityGroupEc2Redshift}",
                                "extract_account": "${SourceAccountNumber}",
                                "node_type": "${TargetRedshiftClusterNodeType}",
                                "number_of_nodes": "${TargetRedshiftClusterNumberOfNodes}"
                              }
                            }
                          },
                          "Next": "target_cluster_status_wait"
                        },
                        "classic_resize_target_cluster": {
                          "Comment": "Invoke lambda function",
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "TimeoutSeconds": 60,
                          "HeartbeatSeconds": 60,
                          "ResultPath": "$.create_cluster",
                          "ResultSelector": {
                            "output.$": "$.Payload"
                          },
                          "Parameters": {
                            "FunctionName": "${LambdaReplay}:$LATEST",
                            "Payload": {
                              "Input": {
                                "action": "classic_resize_cluster",
                                "source_clusterid": "${SourceRedshiftClusterIdentifier}",
                                "cluster_type": "target",
                                "node_type": "${TargetRedshiftClusterNodeType}",
                                "number_of_nodes": "${TargetRedshiftClusterNumberOfNodes}"
                              }
                            }
                          },
                          "Next": "target_cluster_status_wait"
                        },
                        "resume_target_cluster": {
                          "Comment": "Invoke lambda function",
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "TimeoutSeconds": 60,
                          "HeartbeatSeconds": 60,
                          "ResultPath": "$.step_output",
                          "ResultSelector": {
                            "output.$": "$.Payload"
                          },
                          "Parameters": {
                            "FunctionName": "${LambdaReplay}:$LATEST",
                            "Payload": {
                              "Input": {
                                "action": "resume_cluster",
                                "source_clusterid": "${SourceRedshiftClusterIdentifier}",
                                "cluster_type": "target"
                              }
                            }
                          },
                          "Next": "target_cluster_status_wait"
                        },
                        "setup_redshift_objects_target": {
                          "Comment": "Invoke lambda function",
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "TimeoutSeconds": 60,
                          "HeartbeatSeconds": 60,
                          "ResultPath": "$.step_output",
                          "ResultSelector": {
                            "output.$": "$.Payload"
                          },
                          "Parameters": {
                            "FunctionName": "${LambdaReplay}:$LATEST",
                            "Payload": {
                              "Input": {
                                "action": "setup_redshift_objects",
                                "source_clusterid": "${SourceRedshiftClusterIdentifier}",
                                "cluster_type": "target",
                                "replay_bucket": "${TargetAccountWorkloadReplayBucket}",
                                "db": "${SourceRedshiftClusterPrimaryDatabase}",
                                "user": "${SourceRedshiftClusterMasterUsername}"
                              }
                            }
                          },
                          "End": true
                        }
                      }
                    },
                    {
                      "StartAt": "check_replica_cluster_status",
                      "States": {
                        "replica_cluster_status_wait": {
                          "Comment": "Wait 1 minute before status check",
                          "Type": "Wait",
                          "Seconds": 60,
                          "Next": "check_replica_cluster_status"
                        },
                        "check_replica_cluster_status": {
                          "Comment": "Invoke lambda function",
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "TimeoutSeconds": 60,
                          "HeartbeatSeconds": 60,
                          "ResultPath": "$.step_output",
                          "ResultSelector": {
                            "output.$": "$.Payload"
                          },
                          "Parameters": {
                            "FunctionName": "${LambdaReplay}:$LATEST",
                            "Payload": {
                              "Input": {
                                "action": "cluster_status",
                                "source_clusterid": "${SourceRedshiftClusterIdentifier}",
                                "cluster_type": "replica"
                              }
                            }
                          },
                          "Next": "replica_cluster_status_action"
                        },
                        "replica_cluster_status_action": {
                          "Comment": "check if previous step is complete",
                          "Type": "Choice",
                          "Choices": [
                            {
                              "Variable": "$.step_output.output.status",
                              "StringEquals": "availableAvailablecompleted",
                              "Next": "setup_redshift_objects_replica"
                            },
                            {
                              "Variable": "$.step_output.output.status",
                              "StringEquals": "availableAvailable",
                              "Next": "setup_redshift_objects_replica"
                            },
                            {
                              "Variable": "$.step_output.output.status",
                              "StringEquals": "nonExistent",
                              "Next": "update_replica_parameter_group"
                            },
                            {
                              "Variable": "$.step_output.output.status",
                              "StringEquals": "pausedPausedcompleted",
                              "Next": "resume_replica_cluster"
                            }
                          ],
                          "Default": "replica_cluster_status_wait"
                        },
                        "update_replica_parameter_group": {
                          "Comment": "sync replica redshift parameter group with source cluster",
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "TimeoutSeconds": 60,
                          "HeartbeatSeconds": 60,
                          "ResultPath": "$.step_output",
                          "ResultSelector": {
                            "output.$": "$.Payload"
                          },
                          "Parameters": {
                            "FunctionName": "${LambdaReplay}:$LATEST",
                            "Payload": {
                              "Input": {
                                "action": "update_parameter_group",
                                "parameter_group_name": "${ReplicaRedshiftClusterParameterGroup}",
                                "extract_bucket": "${SourceAccountSimpleReplayExtractBucket}"
                              }
                            }
                          },
                          "Next": "create_replica_cluster"
                        },
                        "create_replica_cluster": {
                          "Comment": "Invoke lambda function",
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "TimeoutSeconds": 60,
                          "HeartbeatSeconds": 60,
                          "ResultPath": "$.create_cluster_output",
                          "ResultSelector": {
                            "output.$": "$.Payload"
                          },
                          "Parameters": {
                            "FunctionName": "${LambdaReplay}:$LATEST",
                            "Payload": {
                              "Input": {
                                "action": "create_cluster",
                                "source_clusterid": "${SourceRedshiftClusterIdentifier}",
                                "cluster_type": "replica",
                                "extract_bucket": "${SourceAccountSimpleReplayExtractBucket}",
                                "iam_role": "${SimpleReplayRedshiftIAMRole}",
                                "parameter_group_name": "${ReplicaRedshiftClusterParameterGroup}",
                                "subnet_group": "${RedshiftClusterSubnetGroup}",
                                "security_group_id": "${SecurityGroupEc2Redshift}",
                                "extract_account": "${SourceAccountNumber}"
                              }
                            }
                          },
                          "Next": "replica_cluster_status_wait"
                        },
                        "resume_replica_cluster": {
                          "Comment": "Invoke lambda function",
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "TimeoutSeconds": 60,
                          "HeartbeatSeconds": 60,
                          "ResultPath": "$.step_output",
                          "ResultSelector": {
                            "output.$": "$.Payload"
                          },
                          "Parameters": {
                            "FunctionName": "${LambdaReplay}:$LATEST",
                            "Payload": {
                              "Input": {
                                "action": "resume_cluster",
                                "source_clusterid": "${SourceRedshiftClusterIdentifier}",
                                "cluster_type": "replica"
                              }
                            }
                          },
                          "Next": "replica_cluster_status_wait"
                        },
                        "setup_redshift_objects_replica": {
                          "Comment": "Invoke lambda function",
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "TimeoutSeconds": 60,
                          "HeartbeatSeconds": 60,
                          "ResultPath": "$.step_output",
                          "ResultSelector": {
                            "output.$": "$.Payload"
                          },
                          "Parameters": {
                            "FunctionName": "${LambdaReplay}:$LATEST",
                            "Payload": {
                              "Input": {
                                "action": "setup_redshift_objects",
                                "source_clusterid": "${SourceRedshiftClusterIdentifier}",
                                "cluster_type": "replica",
                                "replay_bucket": "${TargetAccountWorkloadReplayBucket}",
                                "db": "${SourceRedshiftClusterPrimaryDatabase}",
                                "user": "${SourceRedshiftClusterMasterUsername}"
                              }
                            }
                          },
                          "End": true
                        }
                      }
                    }
                  ]
                },
                "setup_complete": {
                  "Comment": "replay complete",
                  "Type": "Pass",
                  "Parameters": {
                    "step_output.$": "$[0].step_output"
                  },
                  "Next": "run_replay_target_and_replica_clusters"
                },
                "run_replay_target_and_replica_clusters": {
                  "Type": "Parallel",
                  "Next": "unload_replica_cluster_stats",
                  "Branches": [
                    {
                      "StartAt": "run_replay_target_cluster",
                      "States": {
                        "run_replay_target_cluster": {
                          "Comment": "Invoke lambda function",
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "TimeoutSeconds": 60,
                          "HeartbeatSeconds": 60,
                          "ResultPath": "$.replay_output",
                          "ResultSelector": {
                            "output.$": "$.Payload"
                          },
                          "Parameters": {
                            "FunctionName": "${LambdaReplay}:$LATEST",
                            "Payload": {
                              "Input": {
                                "action": "run_replay",
                                "source_clusterid": "${SourceRedshiftClusterIdentifier}",
                                "cluster_type": "target",
                                "instance_id": "${EC2InstanceTarget}",
                                "extract_bucket": "${SourceAccountSimpleReplayExtractBucket}",
                                "replay_bucket": "${TargetAccountWorkloadReplayBucket}"
                              }
                            }
                          },
                          "Next": "replay_target_cluster_wait"
                        },
                        "replay_target_cluster_wait": {
                          "Comment": "Wait 5 minutes before status check",
                          "Type": "Wait",
                          "Seconds": 300,
                          "Next": "replay_target_cluster_status_check"
                        },
                        "replay_target_cluster_status_check": {
                          "Comment": "Check Task Status",
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "TimeoutSeconds": 60,
                          "HeartbeatSeconds": 60,
                          "ResultPath": "$.step_output",
                          "ResultSelector": {
                            "output.$": "$.Payload"
                          },
                          "Parameters": {
                            "FunctionName": "${LambdaReplay}:$LATEST",
                            "Payload": {
                              "Input": {
                                "action": "replay_status",
                                "instance_id": "${EC2InstanceTarget}",
                                "command_id.$": "$.replay_output.output.command_id"
                              }
                            }
                          },
                          "Next": "is_replay_target_cluster_complete"
                        },
                        "is_replay_target_cluster_complete": {
                          "Comment": "check if previous step is complete",
                          "Type": "Choice",
                          "Choices": [
                            {
                              "Variable": "$.step_output.output.status",
                              "StringEquals": "Success",
                              "Next": "target_replay_complete"
                            }
                          ],
                          "Default": "replay_target_cluster_wait"
                        },
                        "target_replay_complete": {
                          "Comment": "replay complete",
                          "Type": "Pass",
                          "End": true
                        }
                      }
                    },
                    {
                      "StartAt": "run_replay_replica_cluster",
                      "States": {
                        "run_replay_replica_cluster": {
                          "Comment": "Invoke lambda function",
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "TimeoutSeconds": 60,
                          "HeartbeatSeconds": 60,
                          "ResultPath": "$.replay_output",
                          "ResultSelector": {
                            "output.$": "$.Payload"
                          },
                          "Parameters": {
                            "FunctionName": "${LambdaReplay}:$LATEST",
                            "Payload": {
                              "Input": {
                                "action": "run_replay",
                                "source_clusterid": "${SourceRedshiftClusterIdentifier}",
                                "cluster_type": "replica",
                                "instance_id": "${EC2InstanceReplica}",
                                "extract_bucket": "${SourceAccountSimpleReplayExtractBucket}",
                                "replay_bucket": "${TargetAccountWorkloadReplayBucket}"
                              }
                            }
                          },
                          "Next": "replay_replica_cluster_wait"
                        },
                        "replay_replica_cluster_wait": {
                          "Comment": "Wait 5 minutes before status check",
                          "Type": "Wait",
                          "Seconds": 300,
                          "Next": "replay_replica_cluster_status_check"
                        },
                        "replay_replica_cluster_status_check": {
                          "Comment": "Check Task Status",
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "TimeoutSeconds": 60,
                          "HeartbeatSeconds": 60,
                          "ResultPath": "$.step_output",
                          "ResultSelector": {
                            "output.$": "$.Payload"
                          },
                          "Parameters": {
                            "FunctionName": "${LambdaReplay}:$LATEST",
                            "Payload": {
                              "Input": {
                                "action": "replay_status",
                                "instance_id": "${EC2InstanceReplica}",
                                "command_id.$": "$.replay_output.output.command_id"
                              }
                            }
                          },
                          "Next": "is_replay_replica_cluster_complete"
                        },
                        "is_replay_replica_cluster_complete": {
                          "Comment": "check if previous step is complete",
                          "Type": "Choice",
                          "Choices": [
                            {
                              "Variable": "$.step_output.output.status",
                              "StringEquals": "Success",
                              "Next": "replica_replay_complete"
                            }
                          ],
                          "Default": "replay_replica_cluster_wait"
                        },
                        "replica_replay_complete": {
                          "Comment": "replay complete",
                          "Type": "Pass",
                          "End": true
                        }
                      }
                    }
                  ]
                },
                "unload_replica_cluster_stats": {
                  "Comment": "Invoke lambda function",
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "TimeoutSeconds": 300,
                  "HeartbeatSeconds": 60,
                  "ResultPath": "$[0].step_output",
                  "ResultSelector": {
                    "output.$": "$.Payload"
                  },
                  "Parameters": {
                    "FunctionName": "${LambdaReplay}:$LATEST",
                    "Payload": {
                      "Input": {
                        "action": "unload_stats",
                        "source_clusterid": "${SourceRedshiftClusterIdentifier}",
                        "cluster_type": "replica",
                        "extract_bucket": "${SourceAccountSimpleReplayExtractBucket}",
                        "db": "${SourceRedshiftClusterPrimaryDatabase}",
                        "user": "${SourceRedshiftClusterMasterUsername}"
                      }
                    }
                  },
                  "Next": "load_replica_cluster_stats"
                },
                "load_replica_cluster_stats": {
                  "Comment": "Invoke lambda function",
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "TimeoutSeconds": 300,
                  "HeartbeatSeconds": 60,
                  "ResultPath": "$[0].step_output",
                  "ResultSelector": {
                    "output.$": "$.Payload"
                  },
                  "Parameters": {
                    "FunctionName": "${LambdaReplay}:$LATEST",
                    "Payload": {
                      "Input": {
                        "action": "load_stats",
                        "source_clusterid": "${SourceRedshiftClusterIdentifier}",
                        "cluster_type": "target",
                        "extract_bucket": "${SourceAccountSimpleReplayExtractBucket}",
                        "db": "${SourceRedshiftClusterPrimaryDatabase}",
                        "user": "${SourceRedshiftClusterMasterUsername}"
                      }
                    }
                  },
                  "End": true
                }
              }
            }
          -
            LambdaReplay: !Ref LambdaReplay
            SourceAccountSimpleReplayExtractBucket: !Ref SourceAccountSimpleReplayExtractBucket
            TargetAccountWorkloadReplayBucket: !Ref TargetAccountWorkloadReplayBucket
            EC2InstanceTarget: !Ref EC2InstanceTarget
            EC2InstanceReplica: !Ref EC2InstanceReplica
            SourceAccountNumber: !Ref SourceAccountNumber
            SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref SourceRedshiftClusterEndpoint]]
            SimpleReplayRedshiftIAMRole: !GetAtt 'SimpleReplayRedshiftIAMRole.Arn'
            RedshiftClusterSubnetGroup: !Ref RedshiftClusterSubnetGroup
            SecurityGroupEc2Redshift: !Ref SecurityGroupEc2Redshift
            TargetRedshiftClusterParameterGroup: !Ref TargetRedshiftClusterParameterGroup
            ReplicaRedshiftClusterParameterGroup: !Ref ReplicaRedshiftClusterParameterGroup
            SourceRedshiftClusterPrimaryDatabase: !Ref SourceRedshiftClusterPrimaryDatabase
            SourceRedshiftClusterMasterUsername: !Ref SourceRedshiftClusterMasterUsername
            TargetRedshiftClusterNodeType: !Ref TargetRedshiftClusterNodeType
            TargetRedshiftClusterNumberOfNodes: !Ref TargetRedshiftClusterNumberOfNodes
      RoleArn: !GetAtt IamRoleStepFunctionReplay.Arn

  LambdaStartReplayDeleteClustersIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Description : Lambda Delete Target Replica Cluster IAM Role
      AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      Path: /
      Policies:
          -
            PolicyName: LambdaInvokePolicy
            PolicyDocument :
              Version: 2012-10-17
              Statement:
                -
                  Effect: "Allow"
                  Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - states:StartExecution
                  Resource: "*"
                -
                  Effect: "Allow"
                  Action:
                  - redshift:DeleteCluster
                  Resource:
                    - !Sub
                      - arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${SourceRedshiftClusterIdentifier}-target
                      - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref SourceRedshiftClusterEndpoint]]}
                    - !Sub
                      - arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${SourceRedshiftClusterIdentifier}-target
                      - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref SourceRedshiftClusterEndpoint]]}
                    - !Sub
                      - arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${SourceRedshiftClusterIdentifier}-replica
                      - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref SourceRedshiftClusterEndpoint]]}
                    - !Sub
                      - arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${SourceRedshiftClusterIdentifier}-replica
                      - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref SourceRedshiftClusterEndpoint]]}

  LambdaStartReplayDeleteClusters:
    Type: AWS::Lambda::Function
    Properties:
      Description: lambda to add iam role with access on simple replay S3 bucket to source redshift cluster
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt 'LambdaStartReplayDeleteClustersIAMRole.Arn'
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import botocore.exceptions as be
          import traceback

          def handler(event, context):
              print(event)
              client = boto3.client('redshift')
              target_cluster = event['ResourceProperties'].get('target_cluster')
              replica_cluster = event['ResourceProperties'].get('replica_cluster')
              step_function_arn = event['ResourceProperties'].get('step_function_arn')
              res={}
              if event['RequestType'] == 'Delete':
                  try:
                      res = client.delete_cluster(ClusterIdentifier=target_cluster, SkipFinalClusterSnapshot=True)
                      res = client.delete_cluster(ClusterIdentifier=replica_cluster, SkipFinalClusterSnapshot=True)
                  except:
                      print(traceback.format_exc())
              else:
                  try:
                      client = boto3.client('stepfunctions')
                      response = client.start_execution(
                          stateMachineArn=step_function_arn
                      )
                      print(response)
                  except:
                      print(traceback.format_exc())
                      cfnresponse.send(event, context, cfnresponse.FAILED, input)
                      raise
                  print(response)
              cfnresponse.send(event, context, cfnresponse.SUCCESS, res)

  StartReplayDeleteClusters:
    DependsOn:
     - RedshiftClusterSubnetGroup
     - ReplicaRedshiftClusterParameterGroup
     - TargetRedshiftClusterParameterGroup
    Type: Custom::LambdaStartReplayDeleteClusters
    Properties:
      ServiceToken: !GetAtt [LambdaStartReplayDeleteClusters, Arn]
      step_function_arn: !Ref StepFunctionReplay
      target_cluster:
        Fn::Sub:
          - ${SourceRedshiftClusterIdentifier}-target
          - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref SourceRedshiftClusterEndpoint]]}
      replica_cluster:
        Fn::Sub:
          - ${SourceRedshiftClusterIdentifier}-replica
          - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref SourceRedshiftClusterEndpoint]]}

  InstanceProfileEC2Instance:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: SimpleReplayIAMRole

  SecurityGroupEc2Redshift:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'EC2 and Redshift security group'
      SecurityGroupIngress:
        - CidrIp: !Ref OnPremisesCIDR
          Description : Allow inbound access for on prem users on redshift port for the subnet
          IpProtocol: tcp
          FromPort: !Sub
          - '${port}'
          - {port: !Select [1, !Split [":", !Select [0, !Split ["/", !Ref SourceRedshiftClusterEndpoint]]]]}
          ToPort:  !Sub
          - '${port}'
          - {port: !Select [1, !Split [":", !Select [0, !Split ["/", !Ref SourceRedshiftClusterEndpoint]]]]}
      VpcId: !Ref VPC

  SecurityGroupSelfReference:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Self Referencing Rule
      FromPort: -1
      IpProtocol: -1
      GroupId: !GetAtt [SecurityGroupEc2Redshift, GroupId]
      SourceSecurityGroupId: !GetAtt [SecurityGroupEc2Redshift, GroupId]
      ToPort: -1

  RedshiftClusterSubnetGroup:
    Type: 'AWS::Redshift::ClusterSubnetGroup'
    Properties:
      Description: Cluster subnet group
      SubnetIds:
        - !Ref SubnetId

  ReplicaRedshiftClusterParameterGroup:
    Type: 'AWS::Redshift::ClusterParameterGroup'
    Properties:
      Description: Redshift Cluster Parameter Grup
      ParameterGroupFamily: redshift-1.0

  TargetRedshiftClusterParameterGroup:
    Type: 'AWS::Redshift::ClusterParameterGroup'
    Properties:
      Description: Redshift Cluster Parameter Grup
      ParameterGroupFamily: redshift-1.0


  EC2InstanceReplica:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Properties:
      KeyName:
        Ref: "KeyPairName"
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref InstanceProfileEC2Instance
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - EC2InstanceReplica
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: !Ref EC2InstanceVolumeGiB
          VolumeType: gp2
      ImageId: !Ref EC2InstanceAMI
      NetworkInterfaces:
      - DeleteOnTermination: true
        DeviceIndex: "0"
        SubnetId: !Ref SubnetId
        AssociatePublicIpAddress: true
        GroupSet:
        - Ref: SecurityGroupEc2Redshift
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash -e
              yum update -y
              yum -y install git
              yum -y install python3
              yum -y install python3-pip
              yum -y install aws-cfn-bootstrap
              yum -y install gcc gcc-c++ python3 python3-devel unixODBC unixODBC-devel
              mkdir /root/.aws
              echo "[default]" > /root/.aws/config
              echo "region = ${AWS::Region}" >> /root/.aws/config
              mkdir /amazonutils
              cd /amazonutils
              git clone https://github.com/awslabs/amazon-redshift-utils.git
              pip3 install -r /amazonutils/amazon-redshift-utils/src/SimpleReplay/requirements.txt
              #
              # configure replay metadata
              #
              cd /amazonutils/amazon-redshift-utils/src/SimpleReplay
              mkdir -p cloudformation
              cd /amazonutils/amazon-redshift-utils/src/SimpleReplay/cloudformation
              sed -i 's#extract_bucket=\"\"#extract_bucket=\"${SourceAccountSimpleReplayExtractBucket}\"#g' run_replay.sh
              sed -i 's#replay_bucket=\"\"#replay_bucket=\"${TargetAccountWorkloadReplayBucket}\"#g' run_replay.sh
              sed -i 's#redshift_iam_role=\"\"#redshift_iam_role=\"arn:aws:iam::${AWS::AccountId}:role/${SimpleReplayRedshiftIAMRole}\"#g' run_replay.sh

              if [[ "${AWS::AccountId}" == "${SourceAccountNumber}" ]] && [[ "${GrantS3ReadOnlyAccessToRedshift}" == "Yes" ]]; then
                 sed -i 's#copy_replacements=\"\"#copy_replacements=\"true\"#g' run_replay.sh
              fi
              #
              # push ec2 logs to s3 for future auditing and troubleshooting purposes
              #
              aws s3 cp /amazonutils/amazon-redshift-utils/src/SimpleReplay/cloudformation/run_replay.sh s3://${TargetAccountWorkloadReplayBucket}/ec2-logs/replica/
              aws s3 cp /var/lib/cloud/instance/scripts/part-001 s3://${TargetAccountWorkloadReplayBucket}/ec2-logs/replica/bootstrap_script.sh
              aws s3 cp /var/log/cloud-init-output.log s3://${TargetAccountWorkloadReplayBucket}/ec2-logs/replica/bootstrap_logs.log
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2InstanceReplica --region ${AWS::Region}

            - SourceAccountNumber: !Ref SourceAccountNumber
  EC2InstanceTarget:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Properties:
      KeyName:
        Ref: "KeyPairName"
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref InstanceProfileEC2Instance
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - EC2InstanceTarget
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: !Ref EC2InstanceVolumeGiB
          VolumeType: gp2
      ImageId: !Ref EC2InstanceAMI
      NetworkInterfaces:
      - DeleteOnTermination: true
        DeviceIndex: "0"
        SubnetId: !Ref SubnetId
        AssociatePublicIpAddress: true
        GroupSet:
        - Ref: SecurityGroupEc2Redshift
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash -e
              yum update -y
              yum -y install git
              yum -y install python3
              yum -y install python3-pip
              yum -y install aws-cfn-bootstrap
              yum -y install gcc gcc-c++ python3 python3-devel unixODBC unixODBC-devel
              mkdir /root/.aws
              echo "[default]" > /root/.aws/config
              echo "region = ${AWS::Region}" >> /root/.aws/config
              mkdir /amazonutils
              cd /amazonutils
              git clone https://github.com/awslabs/amazon-redshift-utils.git
              pip3 install -r /amazonutils/amazon-redshift-utils/src/SimpleReplay/requirements.txt
              cd /amazonutils/amazon-redshift-utils/src/SimpleReplay
              mkdir -p cloudformation
              #
              # configure replay metadata
              #
              sed -i "s#master_username: \"\"#master_username: \"${SourceRedshiftClusterMasterUsername}\"#g" replay.yaml
              sed -i "s#execute_unload_statements: \"false\"#execute_unload_statements: \"true\"#g" replay.yaml
              sed -i "s#unload_iam_role: \"\"#unload_iam_role: \"arn:aws:iam::${AWS::AccountId}:role/${SimpleReplayRedshiftIAMRole}\"#g" replay.yaml
              sed -i "s#target_cluster_system_table_unload_iam_role: \"\"#target_cluster_system_table_unload_iam_role: \"arn:aws:iam::${AWS::AccountId}:role/${SimpleReplayRedshiftIAMRole}\"#g" replay.yaml
              if [[ "${AWS::AccountId}" == "${SourceAccountNumber}" ]] && [[ "${GrantS3ReadOnlyAccessToRedshift}" == "Yes" ]]; then
                 sed -i "s#execute_copy_statements: \"false\"#execute_copy_statements: \"true\"#g" replay.yaml
                 sed -i 's#copy_replacements=\"\"#copy_replacements=\"true\"#g' ./cloudformation/run_replay.sh
              fi
              cd /amazonutils/amazon-redshift-utils/src/SimpleReplay/cloudformation
              sed -i 's#extract_bucket=\"\"#extract_bucket=\"${SourceAccountSimpleReplayExtractBucket}\"#g' run_replay.sh
              sed -i 's#replay_bucket=\"\"#replay_bucket=\"${TargetAccountWorkloadReplayBucket}\"#g' run_replay.sh
              sed -i 's#redshift_iam_role=\"\"#redshift_iam_role=\"arn:aws:iam::${AWS::AccountId}:role/${SimpleReplayRedshiftIAMRole}\"#g' run_replay.sh

              #
              # configure redshift objects.yaml
              #
              sed -i 's#<<extract_bucket>>#${SourceAccountSimpleReplayExtractBucket}#g' setup_redshift_objects.sql
              sed -i 's#<<replay_bucket>>#${TargetAccountWorkloadReplayBucket}#g' setup_redshift_objects.sql
              sed -i 's#<<redshift_iam_role>>#arn:aws:iam::${AWS::AccountId}:role/${SimpleReplayRedshiftIAMRole}#g' setup_redshift_objects.sql
              #
              # upload config files to s3
              #
              zip LambdaReplay.zip LambdaReplay.py
              aws s3 cp /amazonutils/amazon-redshift-utils/src/SimpleReplay/cloudformation/LambdaReplay.zip s3://${TargetAccountWorkloadReplayBucket}/config/
              aws s3 cp /amazonutils/amazon-redshift-utils/src/SimpleReplay/cloudformation/setup_redshift_objects.sql s3://${TargetAccountWorkloadReplayBucket}/config/
              aws s3 cp /amazonutils/amazon-redshift-utils/src/SimpleReplay/replay.yaml s3://${TargetAccountWorkloadReplayBucket}/config/
              #
              # push ec2 logs to s3 for future auditing and troubleshooting purposes
              #
              aws s3 cp /amazonutils/amazon-redshift-utils/src/SimpleReplay/cloudformation/run_replay.sh s3://${TargetAccountWorkloadReplayBucket}/ec2-logs/target/
              aws s3 cp /var/lib/cloud/instance/scripts/part-001 s3://${TargetAccountWorkloadReplayBucket}/ec2-logs/target/bootstrap_script.sh
              aws s3 cp /var/log/cloud-init-output.log s3://${TargetAccountWorkloadReplayBucket}/ec2-logs/target/bootstrap_logs.log
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2InstanceTarget --region ${AWS::Region}
            - SourceAccountNumber: !Ref SourceAccountNumber

  KMSAccessPolicy:
    Condition: EncryptedSourceCluster
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Roles:
        - !Ref SimpleReplayIAMRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'KMSAccess'
            Effect: 'Allow'
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:CreateGrant'
              - 'kms:ListGrants'
              - 'kms:DescribeKey'
            Resource: !Ref SourceRedshiftClusterKMSKeyARN

  EndUserStepFunctionPolicy:
    Condition: EndUserStepFunctionPermission
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Roles:
        - !Ref EndUserIamRoleName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action:
            - states:ListStateMachines
            - states:ListActivities
            Resource: arn:aws:states:*:*:*
          -
            Effect: Allow
            Action:
            - states:DescribeStateMachine
            - states:StartExecution
            - states:ListExecutions
            Resource: !Ref StepFunctionReplay
          -
            Effect: Allow
            Action:
            - states:DescribeExecution
            - states:DescribeStateMachineForExecution
            - states:GetExecutionHistory
            - states:StopExecution
            Resource:
              - !Sub
                - arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${NameStepFunctionReplay}:*
                - {NameStepFunctionReplay: StepFunctionReplay.Arn}

Outputs:
  SourceAccountSimpleReplayExtractBucket:
    Description: "S3 bucket name which got created as part of the extract CloudFormation template"
    Value: !Ref SourceAccountSimpleReplayExtractBucket
  TargetAccountWorkloadReplayBucket:
    Description: "S3 bucket name which got created as part of the replay CloudFormation template"
    Value: !Ref TargetAccountWorkloadReplayBucket
  StepFunctionReplay:
    Description: "Step Function name to use in Replaying Redshift workload"
    Value: !GetAtt StepFunctionReplay.Name
