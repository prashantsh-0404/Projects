AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon Redshift RA3 Simple Replay Extraction (To be deployed in the same account as your current production redshift cluster)'

Parameters:
  SourceRedshiftClusterEndpoint:
    Description: Source Redshift cluster endpoint including port number and database name
    Type: String
    Default: redshift-cluster.xxxxxx.region.redshift.amazonaws.com:5439/dev
  AccountIdForReplay:
    Description: AWS Account ID (12 digit) if you may like to run replay process in a different account. This would add a bucket policy to allow this account access Simple Replay Extract bucket and also authorize snapshot restore from your Redshift cluster's latest snapshot. Input N/A if you would run extract and replay processes in the same account
    Type: String
    Default: N/A
  SimpleReplayStartTime:
    Description: Enter the start date in ISO-8601 format (e.g. 2021-01-26T21:41:16+00:00) for which you would like to run extract from source redshift cluster and replay that in target RA3 cluster. You can change it later in the input json of your extract step function
    Type: String
    Default: '2021-05-11T11:00:00+00:00'
    AllowedPattern : "^\\d{4}(-\\d{2}){2}T(\\d{2}:){2}\\d{2}\\+\\d{2}\\:\\d{2}$"
    ConstraintDescription : "date and time should be in ISO-8601 format (e.g. 2021-01-26T21:41:16+00:00)"
  SimpleReplayEndTime:
    Description: Enter the end date and time in ISO-8601 format for which you would like to run extract from source redshift cluster and replay that in target RA3 cluster. You can change it later in the input json of your extract step function
    Type: String
    Default: '2021-05-11T12:00:00+00:00'
    AllowedPattern : "^\\d{4}(-\\d{2}){2}T(\\d{2}:){2}\\d{2}\\+\\d{2}\\:\\d{2}$"
    ConstraintDescription : "date and time should be in ISO-8601 format (e.g. 2021-01-26T21:41:16+00:00)"
  ExtractSystemTables:
    Description: Please input Yes if you want to extract source cluster system tables to compare it with the replay outcome. This would add an IAM role to the source Redshift cluster to perform this unload activity.
    Type: "String"
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  EndUserIamRoleName:
    Description: Existing IAM Role Names for the end user, who may be running the extract-replay evaluation. If provided, the template will grant execution on extract-replay step function to that user role.
    Type: "String"
    Default: "N/A"
  EC2InstanceAMI:
    Description: AMI for the Amazon Linux 2 based EC2 instance. Please don't change this parameter unless needed for some compliance requirement
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Configuration Settings
        Parameters:
          - SourceRedshiftClusterEndpoint
          - AccountIdForReplay
          - EndUserIamRoleName
          - ExtractSystemTables
          - EC2InstanceAMI
      - Label:
          default: Simple Replay Extract Details
        Parameters:
          - SimpleReplayStartTime
          - SimpleReplayEndTime
Conditions:
  IsReplayInDifferentAccount:
    !Not [!Equals [!Ref AccountIdForReplay, "N/A"]]

  EndUserStepFunctionPermission:
    !Not [!Equals [!Ref EndUserIamRoleName, "N/A"]]

  NeedExtractSystemTables:
    !Not [!Equals [!Ref ExtractSystemTables, "No"]]

Resources:

  SimpleReplayS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value:
            !Join [
              '-',
              [
                !Ref 'AWS::StackName',
                'SimpleReplayS3Bucket',
              ],
            ]

  SimpleReplayS3BucketAccessPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: SimpleReplayS3BucketAccess
            Effect: Allow
            Action:
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListMultipartUploadParts
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
            Resource:
              - !Sub "arn:aws:s3:::${SimpleReplayS3Bucket}"
              - !Sub "arn:aws:s3:::${SimpleReplayS3Bucket}/*"


  SimpleReplaySourceRedshiftIAMRole:
    Type: AWS::IAM::Role
    DependsOn: SimpleReplayS3Bucket
    Properties:
      Description : IAM Role for Source Redshift cluster to access Simple Replay S3 bucket
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - redshift.amazonaws.com
        Version: '2012-10-17'
      Path: "/"
      ManagedPolicyArns:
            - !Ref SimpleReplayS3BucketAccessPolicy

  LambdaInfraConfigIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Description : IAM Role to setup infrastructure configurations
      AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
            - !Ref SimpleReplayS3BucketAccessPolicy
      Policies:
          -
            PolicyName: LambdaInvokePolicy
            PolicyDocument :
              Version: 2012-10-17
              Statement:
                -
                  Effect: "Allow"
                  Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - iam:PassRole
                  - redshift:Describe*
                  - ec2:Describe*
                  Resource: "*"
                -
                  Effect: "Allow"
                  Action:
                  - redshift:ModifyClusterIamRoles
                  Resource:
                    - !Sub
                      - arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${SourceRedshiftClusterIdentifier}
                      - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref SourceRedshiftClusterEndpoint]]}

  LambdaSimpleReplayExtractIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Description : IAM Role for lambda to Create Replica Cluster with Lambda function
      AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
            - !Ref SimpleReplayS3BucketAccessPolicy
      Policies:
          -
            PolicyName: LambdaInvokePolicy
            PolicyDocument :
              Version: 2012-10-17
              Statement:
                -
                  Effect: "Allow"
                  Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - iam:PassRole
                  - redshift:Describe*
                  - ec2:Describe*
                  - states:StartExecution
                  Resource: "*"
                -
                  Effect: 'Allow'
                  Action:
                    - redshift:CreateClusterSnapshot
                    - redshift:AuthorizeSnapshotAccess
                  Resource:
                    - !Sub
                      - arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:snapshot:${SourceRedshiftClusterIdentifier}/ra3-migration-evaluation-snapshot-${SourceRedshiftClusterIdentifier}
                      - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref SourceRedshiftClusterEndpoint]]}
                -
                  Effect: 'Allow'
                  Action:
                    - ssm:GetCommandInvocation
                    - ssm:SendCommand
                  Resource:
                    - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"
                    - !Sub "arn:aws:ssm:${AWS::Region}::document/AWS-RunShellScript"
                    - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${ExtractEC2Instance}"
                    - !Sub "arn:aws:s3:::${SimpleReplayS3Bucket}/*"

  LambdaAddIamRoleToSourceRedshiftCluster:
    Condition: NeedExtractSystemTables
    Type: AWS::Lambda::Function
    Properties:
      Description: lambda to add iam role with access on simple replay S3 bucket to source redshift cluster
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt 'LambdaInfraConfigIAMRole.Arn'
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import traceback
          import cfnresponse

          def handler(event, context):
              print(event)
              client = boto3.client('redshift')
              source_cluster = event['ResourceProperties']['Endpoint'].split('.')[0]
              role = event['ResourceProperties']['SimpleReplayRedshiftIAMRole']
              try:
                  if event['RequestType'] == 'Delete':
                      response = client.modify_cluster_iam_roles(
                          ClusterIdentifier=source_cluster,
                          RemoveIamRoles=[role]
                      )
                  else:
                      response = client.modify_cluster_iam_roles(
                          ClusterIdentifier=source_cluster,
                          AddIamRoles=[role]
                      )
              except:
                  print(traceback.format_exc())
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Data': "failed"})
                  raise
              print(response)
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Data': 'finished'})

  AddIamRoleToSourceRedshiftCluster:
    Condition: NeedExtractSystemTables
    Type: Custom::AddIamRoleToSourceRedshiftCluster
    Properties:
      ServiceToken: !GetAtt [LambdaAddIamRoleToSourceRedshiftCluster, Arn]
      Endpoint: !Ref SourceRedshiftClusterEndpoint
      SimpleReplayRedshiftIAMRole: !GetAtt SimpleReplaySourceRedshiftIAMRole.Arn

  LambdaGetClusterNetworkParameters:
    Type: AWS::Lambda::Function
    Properties:
      Description: lambda to populate redshift source cluster parameters as part of CF template
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt 'LambdaInfraConfigIAMRole.Arn'
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import botocore
          import traceback
          import cfnresponse as cfn
          from ipaddress import ip_network, ip_address

          def handler(event, context):
              print(event)
              try:
                  redshift_client = boto3.client('redshift')
                  endpoint = event['ResourceProperties']['Endpoint']
                  src = endpoint.split('.')[0]
                  rs = redshift_client.describe_clusters(ClusterIdentifier=src)['Clusters'][0]
                  kms_key_arn=rs.get('KmsKeyId')
                  kms_key_arn=rs.get('KmsKeyId')
                  if kms_key_arn is None:
                      kms_key_arn="N/A"
                  subnet = rs.get('ClusterSubnetGroupName')
                  subnet_id, cidr = subnet_cidr(redshift_client, subnet, rs.get('ClusterNodes')[0].get('PrivateIPAddress'))
                  vpc = rs.get('VpcId')
                  user = rs.get('MasterUsername')
                  log_location = get_log_location(redshift_client, src)
                  if log_location=='LoggingDisabled' and event['RequestType'] != 'Delete':
                      cfn.send(event, context, cfn.FAILED, {'error': 'please enable audit logging for your Redshift cluster'}, physicalResourceId=None, noEcho=False, reason="RedshiftAuditLoggingDisabled")
                  else:
                      res = {'vpc': vpc, 'subnet_id': subnet_id, 'cidr': cidr, 'user': user,'log_location': log_location, 'kms_key_arn': kms_key_arn}
                      cfn.send(event, context, cfn.SUCCESS, res)
              except Exception as e:
                  res = {'error': e.response['Error']['Code'] if isinstance(e, botocore.exceptions.ClientError) else 'failed'}
                  print(traceback.format_exc())
                  cfn.send(event, context, cfn.FAILED, res)
              print(res)

          def subnet_cidr(c, subnet_group_name, leader_node_private_ip_address):
              subnet = c.describe_cluster_subnet_groups(ClusterSubnetGroupName=subnet_group_name)
              sn = [item['SubnetIdentifier'] for item in subnet.get('ClusterSubnetGroups')[0].get("Subnets")]
              for i in boto3.client('ec2').describe_subnets(SubnetIds=sn).get('Subnets'):
                  if ip_address(leader_node_private_ip_address) in ip_network(i.get('CidrBlock')):
                      return (i.get('SubnetId'), i.get('CidrBlock'))

          def get_log_location(c, src):
              response = c.describe_logging_status(ClusterIdentifier=src)
              if response['LoggingEnabled']:
                  return 's3://' + response['BucketName'] + '/' + response['S3KeyPrefix']
              else:
                  return 'LoggingDisabled'

          if __name__ == "__main__":
              event = {'ResourceProperties': {
                  'Endpoint': 'xxxx.xxxxx.us-east-1.redshift.amazonaws.com:5439/dev'
              }}
              context = ""
              handler(event, context)

  ClusterParameters:
    Type: Custom::ClusterParameters
    Properties:
      ServiceToken: !GetAtt [LambdaGetClusterNetworkParameters, Arn]
      Endpoint: !Ref SourceRedshiftClusterEndpoint

  LambdaSimpleReplayExtract:
    Type: AWS::Lambda::Function
    DependsOn:
     - ExtractEC2Instance
    Properties:
      Description: LambdaSimpleReplayExtract
      Handler: LambdaSimpleReplayExtract.handler
      Runtime: python3.7
      Role: !GetAtt 'LambdaSimpleReplayExtractIAMRole.Arn'
      Timeout: 60
      Code:
        S3Bucket: !Ref SimpleReplayS3Bucket
        S3Key: 'config/LambdaSimpleReplayExtract.zip'

  IamRoleStepFunctionReplay:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - states.amazonaws.com
              Action:
                - sts:AssumeRole
      Path: /
      Policies:
          -
            PolicyName: StepFunctionETLPolicy
            PolicyDocument :
              Version: 2012-10-17
              Statement:
                -
                  Effect: "Allow"
                  Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - lambda:InvokeFunction
                  Resource: "*"

  StepFunctionExtract:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        Fn::Sub:
          - |-
            {
              "Comment": "Step function to Extract source cluster metadata",
              "StartAt": "check_source_cluster_status",
              "States": {
                "check_source_cluster_status": {
                  "Comment": "Invoke lambda function",
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "TimeoutSeconds": 60,
                  "HeartbeatSeconds": 60,
                  "ResultPath": "$.step_output",
                  "ResultSelector": {
                    "output.$": "$.Payload"
                  },
                  "Parameters": {
                    "FunctionName": "${LambdaSimpleReplayExtract}:$LATEST",
                    "Payload": {
                      "Input": {
                        "action": "cluster_status",
                        "endpoint": "${SourceRedshiftClusterEndpoint}"
                      }
                    }
                  },
                  "Next": "source_cluster_status_wait"
                },
                "source_cluster_status_wait": {
                  "Comment": "Wait 1 minute before status check",
                  "Type": "Wait",
                  "Seconds": 60,
                  "Next": "is_source_cluster_available"
                },
                "is_source_cluster_available": {
                  "Comment": "check if previous step is complete",
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.step_output.output.status",
                      "StringEquals": "availableAvailable",
                      "Next": "create_snapshot_if_not_exists"
                    }
                  ],
                  "Default": "check_source_cluster_status"
                },
                "create_snapshot_if_not_exists": {
                  "Comment": "Invoke lambda function",
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "TimeoutSeconds": 60,
                  "HeartbeatSeconds": 60,
                  "ResultPath": "$.step_output",
                  "ResultSelector": {
                    "output.$": "$.Payload"
                  },
                  "Parameters": {
                    "FunctionName": "${LambdaSimpleReplayExtract}:$LATEST",
                    "Payload": {
                      "Input": {
                        "action": "create_snapshot",
                        "endpoint": "${SourceRedshiftClusterEndpoint}"
                      }
                    }
                  },
                  "Next": "snapshot_wait"
                },
                "snapshot_wait": {
                  "Comment": "Wait 1 minute before status check",
                  "Type": "Wait",
                  "Seconds": 60,
                  "Next": "snapshot_status_check"
                },
                "snapshot_status_check": {
                  "Comment": "Check Task Status",
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "TimeoutSeconds": 60,
                  "HeartbeatSeconds": 60,
                  "ResultPath": "$.step_output",
                  "ResultSelector": {
                    "output.$": "$.Payload"
                  },
                  "Parameters": {
                    "FunctionName": "${LambdaSimpleReplayExtract}:$LATEST",
                    "Payload": {
                      "Input": {
                        "action": "snapshot_status",
                        "endpoint": "${SourceRedshiftClusterEndpoint}"
                      }
                    }
                  },
                  "Next": "is_snapshot_complete"
                },
                "is_snapshot_complete": {
                  "Comment": "check if previous step is complete",
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.step_output.output.status",
                      "StringEquals": "available",
                      "Next": "authorize_snapshot"
                    }
                  ],
                  "Default": "snapshot_wait"
                },
                "authorize_snapshot": {
                  "Comment": "authorize snapshot to external account if it is a multi account setup",
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "TimeoutSeconds": 60,
                  "HeartbeatSeconds": 60,
                  "ResultPath": "$.step_output",
                  "ResultSelector": {
                    "output.$": "$.Payload"
                  },
                  "Parameters": {
                    "FunctionName": "${LambdaSimpleReplayExtract}:$LATEST",
                    "Payload": {
                      "Input": {
                        "action": "authorize_snapshot",
                        "account": "${AccountIdForReplay}",
                        "endpoint": "${SourceRedshiftClusterEndpoint}"
                      }
                    }
                  },
                  "Next": "upload_cluster_parameters_to_s3"
                },
                "upload_cluster_parameters_to_s3": {
                  "Comment": "upload source cluster parameters to s3 bucket",
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "TimeoutSeconds": 60,
                  "HeartbeatSeconds": 60,
                  "ResultPath": "$.step_output",
                  "ResultSelector": {
                    "output.$": "$.Payload"
                  },
                  "Parameters": {
                    "FunctionName": "${LambdaSimpleReplayExtract}:$LATEST",
                    "Payload": {
                      "Input": {
                        "action": "upload_params",
                        "endpoint": "${SourceRedshiftClusterEndpoint}",
                        "bucket": "${SimpleReplayS3Bucket}"
                      }
                    }
                  },
                  "Next": "run_extract_from_source_cluster"
                },
                "run_extract_from_source_cluster": {
                  "Comment": "Invoke lambda function",
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "TimeoutSeconds": 60,
                  "HeartbeatSeconds": 60,
                  "ResultPath": "$.extract_output",
                  "ResultSelector": {
                    "output.$": "$.Payload"
                  },
                  "Parameters": {
                    "FunctionName": "${LambdaSimpleReplayExtract}:$LATEST",
                    "Payload": {
                      "Input": {
                        "action": "run_extract",
                        "instance_id": "${ExtractEC2Instance}",
                        "bucket": "${SimpleReplayS3Bucket}",
                        "start_time.$": "$.input.start_time",
                        "end_time.$": "$.input.end_time"
                      }
                    }
                  },
                  "Next": "extract_wait"
                },
                "extract_wait": {
                  "Comment": "Wait 1 minute before status check",
                  "Type": "Wait",
                  "Seconds": 60,
                  "Next": "extract_status_check"
                },
                "extract_status_check": {
                  "Comment": "Check Task Status",
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "TimeoutSeconds": 60,
                  "HeartbeatSeconds": 60,
                  "ResultPath": "$.step_output",
                  "ResultSelector": {
                    "output.$": "$.Payload"
                  },
                  "Parameters": {
                    "FunctionName": "${LambdaSimpleReplayExtract}:$LATEST",
                    "Payload": {
                      "Input": {
                        "action": "command_status",
                        "instance_id": "${ExtractEC2Instance}",
                        "command_id.$": "$.extract_output.output.command_id"
                      }
                    }
                  },
                  "Next": "is_extract_complete"
                },
                "is_extract_complete": {
                  "Comment": "check if previous step is complete",
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.step_output.output.status",
                      "StringEquals": "Success",
                      "Next": "any_post_processing"
                    }
                  ],
                  "Default": "extract_wait"
                },
                "any_post_processing": {
                  "Comment": "dummy step for future use",
                  "Type": "Pass",
                  "End": true
                }
              }
            }
          -
            LambdaSimpleReplayExtract: !Ref LambdaSimpleReplayExtract
            SimpleReplayS3Bucket: !Ref SimpleReplayS3Bucket
            ExtractEC2Instance: !Ref ExtractEC2Instance
            AccountIdForReplay: !Ref AccountIdForReplay
            SourceRedshiftClusterEndpoint: !Ref SourceRedshiftClusterEndpoint
      RoleArn: !GetAtt IamRoleStepFunctionReplay.Arn

  LambdaStartExtract:
    Type: AWS::Lambda::Function
    Properties:
      Description: lambda to add iam role with access on simple replay S3 bucket to source redshift cluster
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt 'LambdaSimpleReplayExtractIAMRole.Arn'
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import traceback
          import cfnresponse
          import json

          def handler(event, context):
              print(event)
              start_time = event['ResourceProperties'].get('start_time')
              end_time = event['ResourceProperties'].get('end_time')
              input = {
                  "input": {
                      "start_time": start_time,
                      "end_time": end_time
                  }
              }
              step_function_arn = event['ResourceProperties'].get('step_function_arn')
              try:
                  if event['RequestType'] != 'Delete':
                      client = boto3.client('stepfunctions')
                      response = client.start_execution(
                          stateMachineArn=step_function_arn,
                          input=json.dumps(input)
                      )
                      print(response)
              except:
                  print(traceback.format_exc())
                  cfnresponse.send(event, context, cfnresponse.FAILED, input)
              print(response)
              cfnresponse.send(event, context, cfnresponse.SUCCESS, input)

  StartExtract:
    Type: Custom::StartExtract
    Properties:
      ServiceToken: !GetAtt [LambdaStartExtract, Arn]
      start_time: !Ref SimpleReplayStartTime
      end_time: !Ref SimpleReplayEndTime
      step_function_arn: !Ref StepFunctionExtract

  SimpleReplayEC2InstanceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: "/"
      ManagedPolicyArns:
            - !Ref SimpleReplayS3BucketAccessPolicy
            - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      Policies:
        - PolicyName: RedshiftAuditLogS3BucketAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource:
                  - !Sub
                    - arn:aws:s3:::${SourceRedshiftClusterAuditLoggingBucketName}
                    - {SourceRedshiftClusterAuditLoggingBucketName: !Select [2, !Split ["/", !GetAtt ClusterParameters.log_location]]}
                  - !Sub
                    - arn:aws:s3:::${SourceRedshiftClusterAuditLoggingBucketName}/*
                    - {SourceRedshiftClusterAuditLoggingBucketName: !Select [2, !Split ["/", !GetAtt ClusterParameters.log_location]]}
              - Effect: Allow
                Action:
                  - logs:*
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - ec2:Describe*
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - redshift:GetClusterCredentials
                  - redshift:DescribeLoggingStatus
                  - redshift:DescribeClusters
                Resource:
                  - !Sub
                    - arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${SourceRedshiftClusterIdentifier}
                    - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref SourceRedshiftClusterEndpoint]]}
                  - !Sub
                    - "arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbname:${SourceRedshiftClusterIdentifier}/${RedshiftDatabaseName}"
                    - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref SourceRedshiftClusterEndpoint]],RedshiftDatabaseName: !Select [1, !Split ["/", !Ref SourceRedshiftClusterEndpoint]]}
                  - !Sub
                    - "arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbuser:${SourceRedshiftClusterIdentifier}/${SourceRedshiftClusterMasterUsername}"
                    - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref SourceRedshiftClusterEndpoint]],SourceRedshiftClusterMasterUsername: !GetAtt ClusterParameters.user}
  InstanceProfileEC2Instance:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: SimpleReplayEC2InstanceIAMRole

  SecurityGroupEc2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'EC2 security group'
      SecurityGroupIngress:
        - CidrIp: !GetAtt ClusterParameters.cidr
          Description : Allow inbound access for ec2 on redshift port for the subnet
          IpProtocol: tcp
          FromPort: !Sub
          - '${port}'
          - {port: !Select [1, !Split [":", !Select [0, !Split ["/", !Ref SourceRedshiftClusterEndpoint]]]]}
          ToPort:  !Sub
          - '${port}'
          - {port: !Select [1, !Split [":", !Select [0, !Split ["/", !Ref SourceRedshiftClusterEndpoint]]]]}
      VpcId: !GetAtt ClusterParameters.vpc

  SecurityGroupSelfReference:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Self Referencing Rule
      FromPort: -1
      IpProtocol: -1
      GroupId: !GetAtt [SecurityGroupEc2, GroupId]
      SourceSecurityGroupId: !GetAtt [SecurityGroupEc2, GroupId]
      ToPort: -1

  ExtractEC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Properties:
      # KeyName: "delete-this-kp"
      InstanceType: "m5.large"
      IamInstanceProfile: !Ref InstanceProfileEC2Instance
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - EC2Instance
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          DeleteOnTermination: true
          VolumeType: gp2
          VolumeSize: 30
      ImageId: !Ref EC2InstanceAMI
      NetworkInterfaces:
      - DeleteOnTermination: true
        AssociatePublicIpAddress: 'true'
        DeviceIndex: "0"
        SubnetId: !GetAtt ClusterParameters.subnet_id
        GroupSet:
        - Ref: SecurityGroupEc2
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash -e
              yum update -y
              yum -y install git
              yum -y install python3
              yum -y install python3-pip
              yum -y install aws-cfn-bootstrap
              yum -y install gcc gcc-c++ python3 python3-devel unixODBC unixODBC-devel
              mkdir /root/.aws
              echo "[default]" > /root/.aws/config
              echo "region = ${AWS::Region}" >> /root/.aws/config
              mkdir /amazonutils
              cd /amazonutils
              git clone https://github.com/awslabs/amazon-redshift-utils.git
              pip3 install -r /amazonutils/amazon-redshift-utils/src/SimpleReplay/requirements.txt
              #
              # configure extract replay metadata
              #
              cd /amazonutils/amazon-redshift-utils/src/SimpleReplay
              mkdir -p cloudformation
              sed -i "s#master_username: \"awsuser\"#master_username: \"${SourceRedshiftClusterMasterUsername}\"#g" ./$bucket_keyprefix/extract.yaml
              sed -i "s#source_cluster_system_table_unload_iam_role: \"\"#source_cluster_system_table_unload_iam_role: \"arn:aws:iam::${AWS::AccountId}:role/${SimpleReplaySourceRedshiftIAMRole}\"#g" extract.yaml
              if [[ ${ExtractSystemTables} == "Yes" ]]; then
               sed -i "s#endpoint:port/dbname#${SourceRedshiftClusterEndpoint}#g"  extract.yaml
              else
               sed -i "s#endpoint:port/dbname##g" extract.yaml
               sed -i "s#log_location: \"\"#log_location: \"${SourceRedshiftClusterAuditLoggingLocationInS3}\"#g" extract.yaml
              fi
              cd /amazonutils/amazon-redshift-utils/src/SimpleReplay/cloudformation
              sed -i 's#bucket_name=\"\"#bucket_name=\"${SimpleReplayS3Bucket}\"#g' run_extract.sh
              zip LambdaSimpleReplayExtract.zip LambdaSimpleReplayExtract.py
              #
              # push config files to s3
              #
              aws s3 cp /amazonutils/amazon-redshift-utils/src/SimpleReplay/cloudformation/LambdaSimpleReplayExtract.zip s3://${SimpleReplayS3Bucket}/config/
              aws s3 cp /amazonutils/amazon-redshift-utils/src/SimpleReplay/extract.yaml s3://${SimpleReplayS3Bucket}/config/
              #
              # push ec2 logs to s3 for future auditing and troubleshooting purposes
              #
              aws s3 cp /amazonutils/amazon-redshift-utils/src/SimpleReplay/cloudformation/run_extract.sh s3://${SimpleReplayS3Bucket}/ec2-logs/
              aws s3 cp /var/lib/cloud/instance/scripts/part-001 s3://${SimpleReplayS3Bucket}/ec2-logs/bootstrap_script.sh
              aws s3 cp /var/log/cloud-init-output.log s3://${SimpleReplayS3Bucket}/ec2-logs/bootstrap_logs.log
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ExtractEC2Instance --region ${AWS::Region}
            - SourceRedshiftClusterMasterUsername: !GetAtt ClusterParameters.user
              SourceRedshiftClusterAuditLoggingLocationInS3: !GetAtt ClusterParameters.log_location

  S3BucketPolicySimpleReplayS3BucketExternalS3AccessIamRole:
    Condition: IsReplayInDifferentAccount
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref SimpleReplayS3Bucket
      PolicyDocument:
        Statement:
          - Principal:
              AWS:
                !Sub ${AccountIdForReplay}
            Effect: Allow
            Action: 's3:ListBucket'
            Resource: !Sub "arn:aws:s3:::${SimpleReplayS3Bucket}"

          - Principal:
              AWS:
                !Sub ${AccountIdForReplay}
            Effect: Allow
            Action: 's3:GetObject'
            Resource: !Sub "arn:aws:s3:::${SimpleReplayS3Bucket}/*"


  EndUserStepFunctionPolicy:
    Condition: EndUserStepFunctionPermission
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Roles:
        - !Ref EndUserIamRoleName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action:
            - states:ListStateMachines
            - states:ListActivities
            Resource: arn:aws:states:*:*:*
          -
            Effect: Allow
            Action:
            - states:DescribeStateMachine
            - states:StartExecution
            - states:ListExecutions
            Resource: !Ref StepFunctionExtract
          -
            Effect: Allow
            Action:
            - states:DescribeExecution
            - states:DescribeStateMachineForExecution
            - states:GetExecutionHistory
            - states:StopExecution
            Resource:
              - !Sub
                - arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${NameStepFunctionExtract}:*
                - {NameStepFunctionExtract: StepFunctionExtract.Arn}

Outputs:
  SourceAccountNumber:
    Description: "Extract Source Account Number"
    Value: !Ref AWS::AccountId
  SourceAccountSimpleReplayExtractBucket:
    Description: "Extract S3 bucket"
    Value: !Ref SimpleReplayS3Bucket
  SourceRedshiftClusterEndpoint:
    Description: "Source Cluster Endpoint"
    Value: !Ref SourceRedshiftClusterEndpoint
  SourceRedshiftClusterMasterUsername:
    Description: "Source Cluster master user name"
    Value: !GetAtt ClusterParameters.user
  SourceRedshiftClusterKMSKeyARN:
    Description: "ARN for KMS key of source redshift cluster"
    Value: !GetAtt ClusterParameters.kms_key_arn
